Metadata-Version: 2.4
Name: boreas-proteus
Version: 0.1.0
Summary: Hydrodynamic mass loss with multi-species fractionation.
Project-URL: Homepage, https://github.com/ExoInteriors/BOREAS
Project-URL: Issues, https://github.com/ExoInteriors/BOREAS/issues
Author: M. Valatsou
License: MIT
Requires-Python: >=3.9
Requires-Dist: numpy>=1.22
Requires-Dist: scipy>=1.9
Requires-Dist: tomli>=2.0; python_version < '3.11'
Description-Content-Type: text/markdown

# BOREAS

Hydrodynamic mass loss (EL/RL) with multi-species fractionation (H–O–C–N–S).  
The bolometric (IR) region is **molecular**, while the escaping outflow is **fully dissociated atoms**.

> Package name: **boreas** · Import name: **boreas**  
> Requires **Python ≥ 3.9**

---

## Installation

### Option A — install from this repo

```bash
# from the repo root:
python -m venv .venv
source .venv/bin/activate # Windows: .venv\Scripts\activate
python -m pip install --upgrade pip
python -m pip install -e .
```

### Option B — one-liner install from GitHub (link might be broken)

```bash
pip install "boreas @ git+https://github.com/ExoInteriors/BOREAS.git@proteus#"
```

## Quick start (run an example)

### Examples live in examples/configs/. Use the runner:

```bash
# default example (k2-18b.toml)
python examples/run_single_planet.py

# explicit config (relative or absolute path)
python examples/run_single_planet.py --config examples/configs/k2-18b.toml

# extra prints
python examples/run_single_planet.py -v -c examples/configs/k2-18b.toml
```

### Typical output

```bash
Config: /.../examples/configs/k2-18b.toml
Planet: K2-18 b
Regime: EL  RXUV[cm]: 1.23e+09  Mdot[g/s]: 4.56e+08
light_major: H  heavy_major: O
T_outflow[K]: 10000.0  mu_outflow: 1.02
```

> Notebook users: relative paths resolve from the notebook’s working directory. Either cd to the repo root first, or build an absolute Path to the TOML.


## How to run your own planet

1. Copy an example file:
```bash
cp examples/configs/k2-18b.toml myplanet.toml
```
2. Edit myplanet.toml (see the full schema below).
3. Run it:
```bash
python examples/run_single_planet.py --config myplanet.toml
# OR
python examples/run_single_planet.py -v -c myplanet.toml
```

## Saving results

### The runner can write results to JSON and/or CSV:

```bash
# JSON (full structure)
python examples/run_single_planet.py -c examples/configs/k2-18b.toml --json out/k2_18b_results.json

# CSV (compact table of key outputs)
python examples/run_single_planet.py -c examples/configs/k2-18b.toml --csv  out/k2_18b_summary.csv
```

## Config file schema (TOML)

### A config describes one planet and the physics knobs. Example:
```bash
[planet]
name           = "K2-18 b"      # use packaged properties (mass, radius, Teq)
FXUV_erg_cm2_s = "from_data"    # or a number (stellar irradiance at orbit; cm^-2 s^-1 * erg)

[composition]                  # MASS fractions (sum≈1). Auto-normalized if enabled
H2  = 0.90
H2O = 0.10
O2  = 0.0
CO2 = 0.0
CO  = 0.0
CH4 = 0.0
N2  = 0.0
NH3 = 0.0
H2S = 0.0
SO2 = 0.0
S2  = 0.0

[physics]
efficiency = 0.30               # η in the EL closure (dimensionless)
albedo     = 0.30
beta       = 0.75               # dayside redistribution factor (unused in core solver)
emissivity = 1.0

[xuv.sigma_cm2]                 # Atomic XUV cross-sections for the DISSOCIATED outflow (cm^2)
H = 1.89e-18
O = 2.00e-18
C = 2.50e-18
N = 3.00e-18
S = 6.00e-18

[infrared.kappa_cm2_g]          # IR mass opacities for the MOLECULAR region (cm^2 g^-1)
H2  = 1.0e-2
H2O = 1.0
O2  = 1.0
CO2 = 1.0
CO  = 1.0
CH4 = 1.0
N2  = 1.0
NH3 = 1.0
H2S = 1.0
SO2 = 1.0
S2  = 1.0

[diffusion.b]                   # Binary diffusion fits b_ij(T)=A*T^gamma (cm^-1 s^-1)
# Keys can be "HO" or "H-O" (order-insensitive); symmetry is inferred.
HO = { A=4.8e17, gamma=0.75 }
HC = { A=6.5e17, gamma=0.70 }
HN = { A=5.0e17, gamma=0.73 }
HS = { A=5.8e17, gamma=0.70 }
OC = { A=8.6e16, gamma=0.76 }
ON = { A=9.0e16, gamma=0.78 }
OS = { A=8.5e16, gamma=0.78 }
CN = { A=7.5e16, gamma=0.74 }
CS = { A=7.2e16, gamma=0.74 }
NS = { A=8.0e16, gamma=0.76 }

[fractionation]
allow_dynamic_light_major = true  # let the code choose i (usually H)
forced_light_major        = "H"   # used only if the above is false
tol                       = 1e-5  # μ_outflow convergence tolerance
max_iter                  = 100   # max fractionation iterations

[advanced]
auto_normalize_X = true           # if composition mass fractions don’t sum to 1, rescale them
```

### Notes & units
- FXUV: if you set a number, use stellar irradiance at orbit (erg cm⁻² s⁻¹). If you use "from_data", the value is read from packaged planet_params.json.
- EL normalization: the model uses the Owen/Schlichting convention with the factor of 4 (absorb over πR², lose over 4πR²). If you pass a global-mean FXUV (already ÷4), set that numeric value directly.
- Composition: mass fractions of molecules in the bolometric region; outflow is atomic (the code handles the bookkeeping).
- σ_XUV: atomic photoabsorption cross-sections (cm²).
- κ_IR: IR mass opacities (cm² g⁻¹) for the hydrostatic molecular layer.
- b_ij(T): binary diffusion coefficients in cm⁻¹ s⁻¹; the model uses gram masses and k_B in erg/K consistently.

## Built-in planet data

### Packaged under boreas.data/planet_params.json (mass [M⊕], radius [R⊕], Teq [K], FXUV [erg cm⁻² s⁻¹]). 
### Use [planet].name = "<key>" to pull those numbers. You can open that JSON to see available keys.

## Running tests (optional but helpful)

```bash
python -m pip install pytest
python -m pytest -q
```

### This runs unit tests that lock in:
- grams vs amu usage in diffusion/fractionation formulas,
- diffusion- vs energy-limited branch behavior when heavy species “stall”,
- well-formed diffusion fits and bounded entrainment fractions.

## Repo Layout

```bash
BOREAS/
├─ src/boreas/
│  ├─ __init__.py
│  ├─ parameters.py             # constants, composition, cross-sections, diffusion fits
│  ├─ mass_loss.py              # EL/RL solver, Parker wind normalization, RXUV search
│  ├─ fractionation.py          # Odert-style multi-species fractionation
│  ├─ config.py                 # TOML I/O and param application
│  ├─ data/planet_params.json   # M, R, Teq, FXUV planet calatog
│  └─ examples/configs/         # (optional) ship example TOMLs here if desired
├─ examples/
│  ├─ configs/k2-18b.toml
│  └─ run_single_planet.py
├─ tests/
│  └─ test_fractionation_units.py
├─ pyproject.toml
└─ README.md
```